/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package instancetemplates

import (
	"context"
	"github.com/GoogleCloudPlatform/k8s-cloud-provider/pkg/cloud/meta"
	"github.com/pkg/errors"
	"google.golang.org/api/compute/v1"
	"k8s.io/utils/pointer"
	"sigs.k8s.io/cluster-api-provider-gcp/cloud/gcperrors"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

// Reconcile reconcile cluster instancetemplate components.
func (s *Service) Reconcile(ctx context.Context) error {
	log := log.FromContext(ctx)
	log.Info("Reconciling instancetemplate resources")

	//instancetemplates, err := s.createOrRecreateInstanceTemplates(ctx)
	_, err := s.createOrRecreateInstanceTemplates(ctx)
	if err != nil {
		return err
	}

	return nil
}

// Delete delete cluster control-plane instancetemplate compoenents.
func (s *Service) Delete(ctx context.Context) error {
	log := log.FromContext(ctx)
	log.Info("Deleting instancetemplate resources")

	return s.deleteInstanceTemplates(ctx)
}

func (s *Service) createOrRecreateInstanceTemplates(ctx context.Context) (*compute.InstanceTemplate, error) {
	/// name should be gcpmachinepool_name + hash
	/// at the end(?) IT housekeeping is needed
	log := log.FromContext(ctx)
	var instancetemplateNew *compute.InstanceTemplate

	log.V(2).Info("Getting bootstrap data for machinepool")
	bootstrapData, err := s.scope.GetBootstrapData()
	if err != nil {
		log.Error(err, "Error getting bootstrap data for machine")
		return nil, errors.Wrap(err, "failed to retrieve bootstrap data")
	}

	instancetemplateSpec := s.scope.InstanceTemplateSpec()

	if instancetemplateSpec.Properties.Metadata == nil {
		instancetemplateSpec.Properties.Metadata = new(compute.Metadata)
	}
	instancetemplateSpec.Properties.Metadata.Items = append(instancetemplateSpec.Properties.Metadata.Items, &compute.MetadataItems{
		Key:   "user-data",
		Value: pointer.StringPtr(bootstrapData),
	})

	log.V(2).Info("Looking for instancetemplate", "name", instancetemplateSpec.Name)
	instancetemplate, err := s.instancetemplates.Get(ctx, meta.GlobalKey(instancetemplateSpec.Name))
	if err != nil {
		if !gcperrors.IsNotFound(err) {
			log.Error(err, "Error looking for instancetemplate")
			return nil, err
		}

		log.V(2).Info("Creating instancetemplate", "name", instancetemplateSpec.Name)
		if err := s.instancetemplates.Insert(ctx, meta.GlobalKey(instancetemplateSpec.Name), instancetemplateSpec); err != nil {
			log.Error(err, "Error creating instancetemplate", "name", instancetemplateSpec.Name)
			return nil, err
		}

		instancetemplate, err = s.instancetemplates.Get(ctx, meta.GlobalKey(instancetemplateSpec.Name))
		if err != nil {
			return nil, err
		}
	}

	if s.isEqual(ctx, instancetemplateSpec, instancetemplate) {
		log.Info("equal")
	} else {
		log.Info("non equal")
		// recreate!!

		// create new
		log.V(2).Info("Creating instancetemplate", "name", instancetemplateSpec.Name)
		if err := s.instancetemplates.Insert(ctx, meta.GlobalKey(instancetemplateSpec.Name), instancetemplateSpec); err != nil {
			log.Error(err, "Error creating instancetemplate", "name", instancetemplateSpec.Name)
			return nil, err
		}

		instancetemplateNew, err = s.instancetemplates.Get(ctx, meta.GlobalKey(instancetemplateSpec.Name))
		if err != nil {
			return nil, err
		}

		// set new
		s.scope.SetInstanceTemplateName(instancetemplateNew.Name)

		// delete old
		key := meta.GlobalKey(instancetemplate.Name)
		log.V(2).Info("Deleting an instancetemplate", "name", instancetemplate.Name)
		if err := s.instancetemplates.Delete(ctx, key); err != nil {
			if !gcperrors.IsNotFound(err) {
				log.Error(err, "Error deleting an instancetemplate", "name", instancetemplate.Name)
				return instancetemplateNew, err
			}
		}
	}

	return instancetemplateNew, nil
}

func (s *Service) isEqual(ctx context.Context, spec *compute.InstanceTemplate, instancetemplate *compute.InstanceTemplate) bool {
	log := log.FromContext(ctx)

	specBootstrapData := s.scope.GetBootstrapDataFromTemplate(spec)
	instancetemplateBootstrapData := s.scope.GetBootstrapDataFromTemplate(instancetemplate)

	log.Info("IT diff", "specbd", specBootstrapData, "itbd", instancetemplateBootstrapData)

	return specBootstrapData == instancetemplateBootstrapData
}

func (s *Service) deleteInstanceTemplates(ctx context.Context) error {
	log := log.FromContext(ctx)
	instancetemplateSpec := s.scope.InstanceTemplateSpec()

	key := meta.GlobalKey(instancetemplateSpec.Name)
	log.V(2).Info("Deleting an instancetemplate", "name", instancetemplateSpec.Name)
	if err := s.instancetemplates.Delete(ctx, key); err != nil {
		if !gcperrors.IsNotFound(err) {
			log.Error(err, "Error deleting an instancetemplate", "name", instancetemplateSpec.Name)
			return err
		}
	}

	return nil
}

//func (s *Service) getInstanceTemplateFromInstanceGroupManager(ctx context.Context, instanceGroupManager *compute.InstanceGroupManager) (*compute.InstanceTemplate, error) {
//	log := log.FromContext(ctx)
//
//	name := instanceGroupManager.InstanceGroup
//	log.Info("getInstanceTemplateFromInstanceGroupManager", "name", name)
//
//	managedinstancegroups.New().
//
//}
